#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "AutoCatFeeder"
  https://create.arduino.cc/cloud/things/9df3b682-62c3-4f0f-aeaf-e49d6ee5e191 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float portionSize;
  bool servo;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Servo.h>

Servo myservo;
unsigned long startMillis;
unsigned long currentMillis;
const unsigned long period = 5000;
int numberOfRotations = 0;
int feederRate = 105;
int reverseRate = 70;

void setup() {
  digitalWrite(LED_BUILTIN, false);
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  pinMode(LED_BUILTIN, OUTPUT);
  myservo.attach(9);
}

void loop() {
  ArduinoCloud.update();

  // currentMillis = millis();
  
  if (servo) {
    if (portionSize == 0.125) {
      numberOfRotations = 3;
    } else if (portionSize == 0.25) {
      numberOfRotations = 6;
    } else {
      numberOfRotations = 0;
    }
    for (int i=0; i < numberOfRotations; i++) {
      myservo.write(feederRate);
      delay(1000);
      myservo.write(reverseRate);
      delay(500);
      myservo.write(feederRate);
      delay(500);
    }
    servo = false;
    onServoChange();
    // if (currentMillis - startMillis >= period) {
    //   feederCount++;
    //   servo = false;
    //   // digitalWrite(LED_BUILTIN, servo);
    //   // myservo.write(90);
    //   onServoChange();
    // }
  }
}

/*
  Since Servo is READ_WRITE variable, onServoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onServoChange()  {
  // turn light on to indicate iot is connected at start up
  digitalWrite(LED_BUILTIN, true);
  
  if (servo) {
      Serial.println("feeding started");
      // startMillis = millis();
  } else {
      Serial.println("feeding completed");
      myservo.write(90);
  }
}

/*
  Since PortionSize is READ_WRITE variable, onPortionSizeChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPortionSizeChange()  {
  Serial.print("Portion size is now: ");
  Serial.println(portionSize);
}

